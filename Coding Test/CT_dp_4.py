import sys
input = sys.stdin.readline

# 가로의 길이가 n, 세로의 길이가 2(2 x n 형태)인 직사각형 형태의 얇은 바닥이 있다. 이 얇은 바닥을 1x2의 덮개, 2x1의 덮개, 2x2의 덮개로 채우려고 한다.
# 바닥을 채우는 모든 경우의 수는 ?
# 목표) 2 x n 의 바닥을 채우는 방법의 수를 796,796으로 나눈 나머지 출력
n = int(input()) # 가로의 길이

dp = [0] * 1001

# key point : 점화식을 구하라는 뜻 = 연관지어서 생각하라는 뜻. n이 늘어날수록 가로 길이가 늘어나는 것이다.
# i번째, i-1번째, i-2번째와의 관계를 파악했고, n >= 1이므로 dp[1],dp[2]는 미리 값을 입력해 놓는다.

# 1. 2xi의 바닥을 왼쪽부터 채워나갔을 때, i-1까지 채워놓았으면, 2x1 덮개 하나만 있으면 모두 채워진다.(d[i-1] * 1)
# (i-1까지 채워놨다는 것은, dp[i-1]을 뜻한다. 마찬가지로 i-2까지 채워놨다는 것은, dp[i-2]를 뜻한다.)
# 2. 마찬가지로, i-2까지 채워놓았으면, 2x2 만큼 남는데 이것은 1x2 2개로 채우는 경우와 2x2 1개로 채우는 경우 2가지로 나뉜다. (dp[i-2] * 2)
# 이처럼 dp[1], dp[2]의 값을 구해놓고 n이 3보다 클 때 부터(n-2 = 1 >= 1) i,i-1,i-2의 관계(점화식)을 정의했으므로 n 범위 내에 모든 경우가 정의된다.

dp[1] = 1
dp[2] = 3

for i in range(3,n+1):
    dp[i] = (dp[n-1] + 2 * dp[n-2]) % 796796

print(dp[n])